{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brent Champion\\\\Documents\\\\Coding\\\\portfolio\\\\pages\\\\about\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/layout';\nexport var __N_SSG = true;\nexport default function About(_ref) {\n  var data = _ref.data;\n  return __jsx(Layout, {\n    page: \"about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"About Me\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, \"data\"));\n}\n_c = About;\n\nvar _c;\n\n$RefreshReg$(_c, \"About\");","map":{"version":3,"sources":["C:/Users/Brent Champion/Documents/Coding/portfolio/pages/about/index.tsx"],"names":["Layout","About","data"],"mappings":";;;AACA,OAAOA,MAAP,MAAmB,yBAAnB;;AAOA,eAAe,SAASC,KAAT,OAAsB;AAAA,MAANC,IAAM,QAANA,IAAM;AACjC,SACI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,CADJ;AAUH;KAXuBD,K","sourcesContent":["import { GetStaticPaths } from 'next';\r\nimport Layout from '../../components/layout';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport matter from 'gray-matter';\r\nimport remark from 'remark';\r\nimport html from 'remark-html'\r\n\r\nexport default function About({data}){\r\n    return (\r\n        <Layout page='about'>\r\n            <div>\r\n                About Me\r\n            </div>\r\n            <div>\r\n                data\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const getStaticProps: GetStaticProps = async (context) => {\r\n    const fullPath = path.join(process.cwd(), 'pages/about/about.md')\r\n    const contents = fs.readFileSync(fullPath, 'utf8')\r\n    const matterResult = matter(contents)\r\n\r\n    const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content)\r\n  const contentHtml = processedContent.toString()\r\n    return {\r\n        props: {\r\n            data: contentHtml,\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}