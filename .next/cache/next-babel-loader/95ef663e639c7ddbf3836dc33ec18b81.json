{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brent Champion\\\\Documents\\\\Coding\\\\portfolio\\\\components\\\\animatedlist.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\nconst listData = [...Array(7).keys()];\n\nconst createCardFlipId = index => `listItem-${index}`;\n\nconst shouldFlip = index => (prev, current) => index === prev || index === current;\n\nconst ListItem = ({\n  data,\n  index,\n  onClick\n}) => {\n  return __jsx(Flipped, {\n    flipId: createCardFlipId(index),\n    stagger: \"card\",\n    shouldInvert: shouldFlip(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"listItem\",\n    onClick: () => onClick(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, __jsx(Flipped, {\n    inverseFlipId: createCardFlipId(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"listItemContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, __jsx(Flipped, {\n    flipId: `avatar-${index}`,\n    stagger: \"card-content\",\n    shouldFlip: shouldFlip(index),\n    delayUntil: createCardFlipId(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, listData.slice(0, 3).map(i => __jsx(Flipped, {\n    flipId: `description-${index}-${i}`,\n    stagger: \"card-content\",\n    shouldFlip: shouldFlip(index),\n    delayUntil: createCardFlipId(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 19\n    }\n  }))))))));\n};\n\nconst ExpandedListItem = ({\n  data,\n  index,\n  onClick\n}) => {\n  return __jsx(Flipped, {\n    flipId: createCardFlipId(index),\n    stagger: \"card\",\n    onStart: el => {\n      setTimeout(() => {\n        el.classList.add(\"animated-in\");\n      }, 400);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"expandedListItem\",\n    onClick: () => onClick(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(Flipped, {\n    inverseFlipId: createCardFlipId(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"expandedListItemContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, __jsx(Flipped, {\n    flipId: `avatar-${index}`,\n    stagger: \"card-content\",\n    delayUntil: createCardFlipId(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"avatar avatarExpanded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, listData.slice(0, 3).map(i => __jsx(Flipped, {\n    flipId: `description-${index}-${i}`,\n    stagger: \"card-content\",\n    delayUntil: createCardFlipId(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  })))), __jsx(\"div\", {\n    className: \"additional-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, listData.slice(0, 3).map(i => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  })))))));\n};\n\nexport default function AnimatedList({\n  data\n}) {\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(null);\n\n  const handleChange = index => {\n    setFocused(focused === index ? null : index);\n  };\n\n  return __jsx(Flipper, {\n    flipKey: focused,\n    className: \"staggered-list-content\",\n    spring: \"gentle\",\n    staggerConfig: {\n      card: {\n        reverse: focused !== null\n      }\n    },\n    decisionData: focused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, listData.map(index => {\n    return __jsx(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }, index === focused ? __jsx(ExpandedListItem, {\n      data: data,\n      index: focused,\n      onClick: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }) : __jsx(ListItem, {\n      data: data,\n      index: index,\n      key: index,\n      onClick: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }));\n  })));\n}","map":{"version":3,"sources":["C:/Users/Brent Champion/Documents/Coding/portfolio/components/animatedlist.tsx"],"names":["React","useState","Flipper","Flipped","listData","Array","keys","createCardFlipId","index","shouldFlip","prev","current","ListItem","data","onClick","slice","map","i","ExpandedListItem","el","setTimeout","classList","add","AnimatedList","focused","setFocused","handleChange","card","reverse"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\r\n\r\nconst listData = [...Array(7).keys()];\r\nconst createCardFlipId = index => `listItem-${index}`;\r\n\r\nconst shouldFlip = index => (prev, current) =>\r\n  index === prev || index === current;\r\n\r\nconst ListItem = ({ data, index, onClick }) => {\r\n  return (\r\n    <Flipped\r\n      flipId={createCardFlipId(index)}\r\n      stagger=\"card\"\r\n      shouldInvert={shouldFlip(index)}\r\n    >\r\n      <div className=\"listItem\" onClick={() => onClick(index)}>\r\n        <Flipped inverseFlipId={createCardFlipId(index)}>\r\n          <div className=\"listItemContent\">\r\n            <Flipped\r\n              flipId={`avatar-${index}`}\r\n              stagger=\"card-content\"\r\n              shouldFlip={shouldFlip(index)}\r\n              delayUntil={createCardFlipId(index)}\r\n            >\r\n              <div className=\"avatar\" />\r\n            </Flipped>\r\n            <div className=\"description\">\r\n              {listData.slice(0, 3).map(i => (\r\n                <Flipped\r\n                  flipId={`description-${index}-${i}`}\r\n                  stagger=\"card-content\"\r\n                  shouldFlip={shouldFlip(index)}\r\n                  delayUntil={createCardFlipId(index)}\r\n                >\r\n                  <div />\r\n                </Flipped>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </Flipped>\r\n      </div>\r\n    </Flipped>\r\n  );\r\n};\r\n\r\nconst ExpandedListItem = ({ data, index, onClick }) => {\r\n  return (\r\n    <Flipped\r\n      flipId={createCardFlipId(index)}\r\n      stagger=\"card\"\r\n      onStart={el => {\r\n        setTimeout(() => {\r\n          el.classList.add(\"animated-in\");\r\n        }, 400);\r\n      }}\r\n    >\r\n      <div className=\"expandedListItem\" onClick={() => onClick(index)}>\r\n        <Flipped inverseFlipId={createCardFlipId(index)}>\r\n          <div className=\"expandedListItemContent\">\r\n            <Flipped\r\n              flipId={`avatar-${index}`}\r\n              stagger=\"card-content\"\r\n              delayUntil={createCardFlipId(index)}\r\n            >\r\n              <div className=\"avatar avatarExpanded\" />\r\n            </Flipped>\r\n            <div className=\"description\">\r\n              {listData.slice(0, 3).map(i => (\r\n                <Flipped\r\n                  flipId={`description-${index}-${i}`}\r\n                  stagger=\"card-content\"\r\n                  delayUntil={createCardFlipId(index)}\r\n                >\r\n                  <div />\r\n                </Flipped>\r\n              ))}\r\n            </div>\r\n            <div className=\"additional-content\">\r\n              {listData.slice(0, 3).map(i => (\r\n                <div />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </Flipped>\r\n      </div>\r\n    </Flipped>\r\n  );\r\n};\r\n\r\nexport default function AnimatedList({data}) {\r\n    const [focused, setFocused] = useState(null);\r\n    \r\n    const handleChange = (index) => {\r\n        setFocused(focused === index ? null : index)\r\n    };\r\n  \r\n    return (\r\n      <Flipper\r\n        flipKey={focused}\r\n        className=\"staggered-list-content\"\r\n        spring=\"gentle\"\r\n        staggerConfig={{\r\n          card: {\r\n            reverse: focused !== null\r\n          }\r\n        }}\r\n        decisionData={focused}\r\n      >\r\n        <ul className=\"list\">\r\n          {listData.map(index => {\r\n            return (\r\n              <li key={index}>\r\n                {index === focused ? (\r\n                  <ExpandedListItem\r\n                    data={data}\r\n                    index={focused}\r\n                    onClick={handleChange}\r\n                  />\r\n                ) : (\r\n                  <ListItem data={data} index={index} key={index} onClick={handleChange} />\r\n                )}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </Flipper>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}