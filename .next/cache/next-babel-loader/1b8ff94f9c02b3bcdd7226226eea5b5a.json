{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nexport default class Content {\n  constructor(type) {\n    _defineProperty(this, \"dir\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.dir = path.join(process.cwd() + '/content', type);\n    this.files = fs.readdirSync(this.dir);\n  }\n\n  getAllData() {\n    const files = fs.readdirSync(this.dir);\n    let rawData = files.map(name => {\n      const id = name.replace(/\\.md$/, '');\n      const filePath = path.join(this.dir, name);\n      const fileContents = fs.readFileSync(filePath, 'utf8');\n      const result = matter(fileContents);\n      return _objectSpread({\n        id\n      }, result.data);\n    });\n    this.data = this.sort(rawData);\n    return this.data;\n  }\n\n  getAllTags() {\n    let tags = [];\n    this.files.forEach(name => {\n      const id = name.replace(/\\.md$/, '');\n      const fullPath = path.join(this.dir, name);\n      const fileContents = fs.readFileSync(fullPath, 'utf8');\n      const matterResult = matter(fileContents);\n      let exists = false;\n\n      if (matterResult.data.tags) {\n        matterResult.data.tags.forEach(name => {\n          for (var i = 0; i < tags.length; i++) {\n            if (tags[i].name == name) {\n              tags[i].count += 1;\n              exists = true;\n            }\n          }\n\n          if (!exists) {\n            tags.push({\n              name,\n              count: 1\n            });\n          }\n        });\n      }\n    });\n    return tags;\n  }\n\n  getAllIds() {\n    return this.files.map(name => {\n      return {\n        params: {\n          id: name.replace(/\\.md$/, '').toString()\n        }\n      };\n    });\n  }\n\n  async getData(id) {\n    const filePath = path.join(this.dir, `${id}.md`);\n    const fileContents = fs.readFileSync(filePath, 'utf8');\n    const matterResult = matter(fileContents);\n    const processedContent = await remark().use(html).process(matterResult.content);\n    const contentHtml = processedContent.toString();\n    return _objectSpread({\n      id,\n      contentHtml\n    }, matterResult.data);\n  }\n\n  sort(data) {\n    return data.sort((a, b) => {\n      const start_a = a.startDate.split('-').join('');\n      const start_b = b.startDate.split('-').join('');\n      const end_a = a.endDate.split('-').join('');\n      const end_b = b.endDate.split('-').join('');\n\n      if (a.endDate == 'present' && b.endDate == 'present') {\n        if (start_a > start_b) return -1;else return 1;\n      } else if (a.endDate == 'present') {\n        return -1;\n      } else if (b.endDate == 'present') {\n        return 1;\n      } else {\n        if (end_a > end_b) return -1;else return 1;\n      }\n\n      return a;\n    }).filter(post => post.exists);\n  }\n\n}\n\nfunction removeDuplicates(array) {\n  var a = array.concat();\n\n  for (var i = 0; i < a.length; ++i) {\n    for (var j = i + 1; j < a.length; ++j) {\n      if (a[i].name === a[j].name) a.splice(j--, 1);\n    }\n  }\n\n  return a.sort((a, b) => {\n    if (a.count < b.count) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\n\nexport function getAllTags() {\n  let tags = [];\n  const workTags = new Content('work').getAllTags() || [];\n  const projectTags = new Content('projects').getAllTags() || [];\n  const postTags = new Content('posts').getAllTags() || [];\n  return removeDuplicates(tags.concat(workTags, projectTags, postTags)).sort((a, b) => a.count > b.count ? 1 : -1);\n}\nexport function getAllTagIds() {\n  const raw_tags = getAllTags(); // [{name: 'c++', count: 5}, {}...etc.]\n\n  let tagNames = [];\n  raw_tags.forEach(tag => {\n    tagNames.push(tag.name);\n  });\n  let tags = tagNames.map(tag => {\n    return {\n      params: {\n        id: tag\n      }\n    };\n  });\n  return tags;\n}","map":{"version":3,"sources":["C:/Users/Brent Champion/Documents/Coding/portfolio/lib/content.tsx"],"names":["fs","path","matter","remark","html","Content","constructor","type","dir","join","process","cwd","files","readdirSync","getAllData","rawData","map","name","id","replace","filePath","fileContents","readFileSync","result","data","sort","getAllTags","tags","forEach","fullPath","matterResult","exists","i","length","count","push","getAllIds","params","toString","getData","processedContent","use","content","contentHtml","a","b","start_a","startDate","split","start_b","end_a","endDate","end_b","filter","post","removeDuplicates","array","concat","j","splice","workTags","projectTags","postTags","getAllTagIds","raw_tags","tagNames","tag"],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nimport remark from 'remark';\r\nimport html from 'remark-html';\r\nimport { parseISO } from 'date-fns/esm/fp';\r\n\r\ninterface Post {\r\n    id: string,\r\n}\r\n\r\ninterface Tag {\r\n    name: string,\r\n    count: number,\r\n}\r\n\r\nexport default class Content {\r\n    dir: string;\r\n    data: Array<Post>;\r\n    files: Array<string>;\r\n\r\n    constructor(type: string) {\r\n        this.dir = path.join(process.cwd() + '/content', type);\r\n        this.files = fs.readdirSync(this.dir);\r\n    }\r\n\r\n    getAllData(): Array<Post> {\r\n        const files = fs.readdirSync(this.dir);\r\n        let rawData = files.map((name): any => {\r\n            const id = name.replace(/\\.md$/, '');\r\n            const filePath = path.join(this.dir, name);\r\n            const fileContents = fs.readFileSync(filePath, 'utf8');\r\n\r\n            const result = matter(fileContents);\r\n\r\n            return {\r\n                id,\r\n                ...result.data,\r\n            };\r\n        });\r\n\r\n        this.data = this.sort(rawData);\r\n        return this.data;\r\n    }\r\n\r\n    getAllTags(): Array<any> {\r\n        let tags: Array<any> = [];\r\n\r\n        this.files.forEach(name => {\r\n            const id = name.replace(/\\.md$/, '');\r\n            const fullPath = path.join(this.dir, name);\r\n            const fileContents = fs.readFileSync(fullPath, 'utf8');\r\n\r\n            const matterResult = matter(fileContents);\r\n\r\n            let exists = false;\r\n            if (matterResult.data.tags) {\r\n                matterResult.data.tags.forEach(name => {\r\n                    for (var i = 0; i < tags.length; i++) {\r\n                        if (tags[i].name == name) {\r\n                            tags[i].count += 1;\r\n                            exists = true;\r\n                        }\r\n                    }\r\n                    if (!exists) {\r\n                        tags.push({\r\n                            name,\r\n                            count: 1\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        })\r\n\r\n        return tags;\r\n    }\r\n\r\n    getAllIds(): Array<any> {\r\n        return this.files.map(name => {\r\n            return {\r\n                params: {\r\n                    id: name.replace(/\\.md$/, '').toString()\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    async getData(id: string) {\r\n        const filePath = path.join(this.dir, `${id}.md`)\r\n        const fileContents = fs.readFileSync(filePath, 'utf8');\r\n        const matterResult = matter(fileContents);\r\n\r\n        const processedContent = await remark().use(html).process(matterResult.content);\r\n        const contentHtml = processedContent.toString();\r\n\r\n        return {\r\n            id,\r\n            contentHtml,\r\n            ...matterResult.data\r\n        };\r\n    }\r\n\r\n    sort(data: Array<any>): Array<any> {\r\n        return data.sort((a, b) => {\r\n            const start_a = a.startDate.split('-').join('');\r\n            const start_b = b.startDate.split('-').join('');\r\n            const end_a = a.endDate.split('-').join('');\r\n            const end_b = b.endDate.split('-').join('');\r\n\r\n            if (a.endDate == 'present' && b.endDate == 'present') {\r\n                if (start_a > start_b) return -1;\r\n                else return 1\r\n            } else if (a.endDate == 'present') {\r\n                return -1;\r\n            } else if (b.endDate == 'present') {\r\n                return 1;\r\n            } else {\r\n                if (end_a > end_b) return -1;\r\n                else return 1\r\n            }\r\n            return a;\r\n        }).filter(post => post.exists)\r\n    }\r\n}\r\n\r\nfunction removeDuplicates(array: Array<any>): Array<any> {\r\n    var a = array.concat();\r\n    for (var i = 0; i < a.length; ++i) {\r\n        for (var j = i + 1; j < a.length; ++j) {\r\n            if (a[i].name === a[j].name)\r\n                a.splice(j--, 1);\r\n        }\r\n    }\r\n\r\n    return a.sort((a, b) => {\r\n        if (a.count < b.count) {\r\n            return 1;\r\n        } else { \r\n            return -1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function getAllTags(): Array<string> {\r\n    let tags: Array<string> = [];\r\n    const workTags = new Content('work').getAllTags() || [];\r\n    const projectTags = new Content('projects').getAllTags() || [];\r\n    const postTags = new Content('posts').getAllTags() || [];\r\n    return removeDuplicates(tags.concat(workTags, projectTags, postTags))\r\n        .sort((a, b) => a.count > b.count ? 1 : -1)\r\n}\r\n\r\nexport function getAllTagIds() {\r\n    const raw_tags: Array<any> = getAllTags(); // [{name: 'c++', count: 5}, {}...etc.]\r\n\r\n    let tagNames = [];\r\n    raw_tags.forEach(tag => {\r\n        tagNames.push(tag.name);\r\n    })\r\n\r\n    let tags = tagNames.map(tag => {\r\n        return {\r\n            params: {\r\n                id: tag\r\n            }\r\n        }\r\n    })\r\n    return tags;\r\n}"]},"metadata":{},"sourceType":"module"}