{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst projectsDir = path.join(process.cwd(), 'projects'); //TODO: Make global function pre-cache\n\nexport function getProjectsData() {\n  const fileNames = fs.readdirSync(projectsDir);\n  let projects;\n  projects = fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(projectsDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return projects.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllProjectTags() {\n  const tags = [];\n  const fileNames = fs.readdirSync(projectsDir);\n  fileNames.forEach(fileName => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(projectsDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const matterResult = matter(fileContents);\n    let exists = false;\n\n    if (matterResult.data.tags) {\n      matterResult.data.tags.forEach(name => {\n        for (var i = 0; i < tags.length; i++) {\n          if (tags[i].name == name) {\n            tags[i].count += 1;\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          tags.push({\n            name,\n            count: 1\n          });\n        }\n      });\n    }\n  }); // Sort descending order\n\n  return tags.sort((a, b) => b.count - a.count);\n}\nexport function getAllProjectIds() {\n  const fileNames = fs.readdirSync(projectsDir);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '').toString()\n      }\n    };\n  });\n}\nexport async function getProjectData(id) {\n  const fullPath = path.join(projectsDir, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["C:/Users/Brent Champion/Documents/Coding/portfolio/lib/projects.tsx"],"names":["fs","path","matter","remark","html","projectsDir","join","process","cwd","getProjectsData","fileNames","readdirSync","projects","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllProjectTags","tags","forEach","exists","name","i","length","count","push","getAllProjectIds","params","toString","getProjectData","processedContent","use","content","contentHtml"],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nimport remark from 'remark';\r\nimport html from 'remark-html';\r\n\r\nconst projectsDir = path.join(process.cwd(), 'projects');\r\n\r\n//TODO: Make global function pre-cache\r\nexport function getProjectsData() {\r\n\tconst fileNames = fs.readdirSync(projectsDir);\r\n\r\n\tlet projects: Array<any>;\r\n\tprojects = fileNames.map((fileName): any => {\r\n\t\tconst id = fileName.replace(/\\.md$/, '');\r\n\t\tconst fullPath = path.join(projectsDir, fileName);\r\n\t\tconst fileContents = fs.readFileSync(fullPath, 'utf8');\r\n\r\n\t\tconst matterResult = matter(fileContents);\r\n\r\n\t\treturn {\r\n\t\t\tid,\r\n\t\t\t...matterResult.data\r\n\t\t};\r\n\t});\r\n\r\n\t// Sort posts by date\r\n\treturn projects.sort((a, b) => {\r\n\t  if (a.date < b.date) {\r\n\t    return 1\r\n\t  } else {\r\n\t    return -1\r\n\t  }\r\n\t})\r\n}\r\n\r\nexport function getAllProjectTags() {\r\n\tconst tags = [];\r\n\tconst fileNames = fs.readdirSync(projectsDir);\r\n\r\n\tfileNames.forEach((fileName) => {\r\n\t\tconst id = fileName.replace(/\\.md$/, '');\r\n\t\tconst fullPath = path.join(projectsDir, fileName);\r\n\t\tconst fileContents = fs.readFileSync(fullPath, 'utf8');\r\n\r\n\t\tconst matterResult = matter(fileContents);\r\n\r\n\t\tlet exists = false;\r\n\t\tif (matterResult.data.tags) {\r\n\t\t\tmatterResult.data.tags.forEach(name => {\r\n\t\t\t\tfor (var i = 0; i < tags.length; i++) {\r\n\t\t\t\t\tif (tags[i].name == name) {\r\n\t\t\t\t\t\ttags[i].count += 1;\r\n\t\t\t\t\t\texists = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!exists) {\r\n\t\t\t\t\ttags.push({\r\n\t\t\t\t\t\tname, \r\n\t\t\t\t\t\tcount: 1\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\t// Sort descending order\r\n\treturn tags.sort((a, b) => b.count - a.count);\r\n}\r\n\r\nexport function getAllProjectIds() {\r\n\tconst fileNames = fs.readdirSync(projectsDir);\r\n\r\n\treturn fileNames.map((fileName) => {\r\n\t\treturn {\r\n\t\t\tparams: {\r\n\t\t\t\tid: fileName.replace(/\\.md$/, '').toString()\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n}\r\n\r\nexport async function getProjectData(id) {\r\n\tconst fullPath = path.join(projectsDir, `${id}.md`);\r\n\tconst fileContents = fs.readFileSync(fullPath, 'utf8');\r\n\tconst matterResult = matter(fileContents);\r\n\r\n\tconst processedContent = await remark().use(html).process(matterResult.content);\r\n\tconst contentHtml = processedContent.toString();\r\n\r\n\treturn {\r\n\t\tid,\r\n\t\tcontentHtml,\r\n\t\t...matterResult.data\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}