{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst projectsDir = path.join(process.cwd(), 'projects');\nexport function getProjectsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(projectsDir);\n  console.log(fileNames);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(projectsDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllProjectIds() {\n  const fileNames = fs.readdirSync(projectsDir);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '').toString()\n      }\n    };\n  });\n}\nexport async function getProjectData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["C:/Users/Brent Champion/Documents/Coding/portfolio/lib/projects.tsx"],"names":["fs","path","matter","remark","html","projectsDir","join","process","cwd","getProjectsData","fileNames","readdirSync","console","log","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllProjectIds","params","toString","getProjectData","postsDirectory","processedContent","use","content","contentHtml"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,WAAW,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAApB;AAEA,OAAO,SAASC,eAAT,GAA2B;AAChC;AACA,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,WAAf,CAAlB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACA,QAAMI,YAAY,GAAGJ,SAAS,CAACK,GAAV,CAAcC,QAAQ,IAAI;AAC7C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,UAAMC,QAAQ,GAAGlB,IAAI,CAACK,IAAL,CAAUD,WAAV,EAAuBW,QAAvB,CAAjB;AAEA,UAAMI,YAAY,GAAGpB,EAAE,CAACqB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAP6C,CAS7C;;AACA,UAAMG,YAAY,GAAGpB,MAAM,CAACkB,YAAD,CAA3B,CAV6C,CAY7C;;AACA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAjBoB,CAArB,CAJgC,CAuBhC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,SAASC,gBAAT,GAA4B;AACjC,QAAMlB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,WAAf,CAAlB;AAEA,SAAOK,SAAS,CAACK,GAAV,CAAcC,QAAQ,IAAI;AAC/B,WAAO;AACLa,MAAAA,MAAM,EAAE;AACNZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,EAA8BY,QAA9B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,cAAf,CAA8Bd,EAA9B,EAAkC;AACvC,QAAME,QAAQ,GAAGlB,IAAI,CAACK,IAAL,CAAU0B,cAAV,EAA2B,GAAEf,EAAG,KAAhC,CAAjB;AACA,QAAMG,YAAY,GAAGpB,EAAE,CAACqB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFuC,CAIvC;;AACA,QAAMG,YAAY,GAAGpB,MAAM,CAACkB,YAAD,CAA3B,CALuC,CAOvC;;AACA,QAAMa,gBAAgB,GAAG,MAAM9B,MAAM,GAClC+B,GAD4B,CACxB9B,IADwB,EAE5BG,OAF4B,CAEpBe,YAAY,CAACa,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACH,QAAjB,EAApB,CAXuC,CAavC;;AACA;AACEb,IAAAA,EADF;AAEEmB,IAAAA;AAFF,KAGKd,YAAY,CAACC,IAHlB;AAKD","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport remark from 'remark'\r\nimport html from 'remark-html'\r\n\r\nconst projectsDir = path.join(process.cwd(), 'projects')\r\n\r\nexport function getProjectsData() {\r\n  // Get file names under /posts\r\n  const fileNames = fs.readdirSync(projectsDir)\r\n  console.log(fileNames);\r\n  const allPostsData = fileNames.map(fileName => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, '')\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(projectsDir, fileName)\r\n\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    }\r\n  })\r\n\r\n  // Sort posts by date\r\n  return allPostsData.sort((a, b) => {\r\n    if (a.date < b.date) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  })\r\n}\r\n\r\nexport function getAllProjectIds() {\r\n  const fileNames = fs.readdirSync(projectsDir)\r\n\r\n  return fileNames.map(fileName => {\r\n    return {\r\n      params: {\r\n        id: fileName.replace(/\\.md$/, '').toString()\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport async function getProjectData(id) {\r\n  const fullPath = path.join(postsDirectory, `${id}.md`)\r\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n  // Use gray-matter to parse the post metadata section\r\n  const matterResult = matter(fileContents)\r\n\r\n  // Use remark to convert markdown into HTML string\r\n  const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content)\r\n  const contentHtml = processedContent.toString()\r\n\r\n  // Combine the data with the id and contentHtml\r\n  return {\r\n    id,\r\n    contentHtml,\r\n    ...matterResult.data\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}