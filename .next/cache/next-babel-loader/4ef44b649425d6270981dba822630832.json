{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nexport default class Content {\n  // Hold directory for content\n  constructor(type) {\n    _defineProperty(this, \"dir\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.dir = path.join(process.cwd(), type);\n  }\n\n  getAllData() {\n    const files = fs.readdirSync(this.dir);\n    let rawData = files.map(name => {\n      const id = name.replace(/\\.md$/, '');\n      const filePath = path.join(this.dir, name);\n      const fileContents = fs.readFileSync(filePath, 'utf8');\n      const result = matter(fileContents);\n      return _objectSpread({\n        id\n      }, result.data);\n    });\n    this.data = this.sort(rawData);\n    return this.data;\n  }\n\n  getAllTags() {}\n\n  getAllIds() {}\n\n  getData(id) {}\n\n  sort(data) {\n    return data;\n  }\n\n}\nexport function getAllTags() {\n  let tags = new Content('work').getAllTags();\n  tags += new Content('projects').getAllTags();\n  tags += new Content('posts').getAllTags();\n  return tags;\n}","map":{"version":3,"sources":["C:/Users/Brent Champion/Documents/Coding/portfolio/lib/content.tsx"],"names":["fs","path","matter","Content","constructor","type","dir","join","process","cwd","getAllData","files","readdirSync","rawData","map","name","id","replace","filePath","fileContents","readFileSync","result","data","sort","getAllTags","getAllIds","getData","tags"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AASA,eAAe,MAAMC,OAAN,CAAc;AACZ;AAGbC,EAAAA,WAAW,CAACC,IAAD,EAAe;AAAA;;AAAA;;AACtB,SAAKC,GAAL,GAAWL,IAAI,CAACM,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyBJ,IAAzB,CAAX;AACH;;AAEDK,EAAAA,UAAU,GAAgB;AACtB,UAAMC,KAAK,GAAGX,EAAE,CAACY,WAAH,CAAe,KAAKN,GAApB,CAAd;AACA,QAAIO,OAAO,GAAGF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAe;AACnC,YAAMC,EAAE,GAAGD,IAAI,CAACE,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAX;AACA,YAAMC,QAAQ,GAAGjB,IAAI,CAACM,IAAL,CAAU,KAAKD,GAAf,EAAoBS,IAApB,CAAjB;AACA,YAAMI,YAAY,GAAGnB,EAAE,CAACoB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AAEA,YAAMG,MAAM,GAAGnB,MAAM,CAACiB,YAAD,CAArB;AAEA;AACIH,QAAAA;AADJ,SAEOK,MAAM,CAACC,IAFd;AAIH,KAXa,CAAd;AAaA,SAAKA,IAAL,GAAY,KAAKC,IAAL,CAAUV,OAAV,CAAZ;AACA,WAAO,KAAKS,IAAZ;AACH;;AAEDE,EAAAA,UAAU,GAAkB,CAE3B;;AAEDC,EAAAA,SAAS,GAAG,CAEX;;AAEDC,EAAAA,OAAO,CAACV,EAAD,EAAa,CAEnB;;AAEDO,EAAAA,IAAI,CAACD,IAAD,EAA+B;AAC/B,WAAOA,IAAP;AACH;;AAzCwB;AA4C7B,OAAO,SAASE,UAAT,GAAqC;AACxC,MAAIG,IAAI,GAAG,IAAIxB,OAAJ,CAAY,MAAZ,EAAoBqB,UAApB,EAAX;AACAG,EAAAA,IAAI,IAAI,IAAIxB,OAAJ,CAAY,UAAZ,EAAwBqB,UAAxB,EAAR;AACAG,EAAAA,IAAI,IAAI,IAAIxB,OAAJ,CAAY,OAAZ,EAAqBqB,UAArB,EAAR;AACA,SAAOG,IAAP;AACH","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nimport remark from 'remark';\r\nimport html from 'remark-html';\r\n\r\ninterface Post {\r\n    id: string,\r\n\r\n}\r\n\r\nexport default class Content {\r\n    dir: string; // Hold directory for content\r\n    data: Array<Post>;\r\n\r\n    constructor(type: string) {\r\n        this.dir = path.join(process.cwd(), type);\r\n    }\r\n\r\n    getAllData(): Array<Post> {\r\n        const files = fs.readdirSync(this.dir);\r\n        let rawData = files.map((name): any => {\r\n            const id = name.replace(/\\.md$/, '');\r\n            const filePath = path.join(this.dir, name);\r\n            const fileContents = fs.readFileSync(filePath, 'utf8');\r\n\r\n            const result = matter(fileContents);\r\n\r\n            return {\r\n                id,\r\n                ...result.data,\r\n            };\r\n        });\r\n\r\n        this.data = this.sort(rawData);\r\n        return this.data;\r\n    }\r\n\r\n    getAllTags(): Array<string> {\r\n\r\n    }\r\n\r\n    getAllIds() {\r\n\r\n    }\r\n\r\n    getData(id: string) {\r\n\r\n    }\r\n\r\n    sort(data: Array<any>): Array<any> {\r\n        return data;\r\n    }\r\n}\r\n\r\nexport function getAllTags(): Array<string> {\r\n    let tags = new Content('work').getAllTags();\r\n    tags += new Content('projects').getAllTags();\r\n    tags += new Content('posts').getAllTags();\r\n    return tags;\r\n}"]},"metadata":{},"sourceType":"module"}