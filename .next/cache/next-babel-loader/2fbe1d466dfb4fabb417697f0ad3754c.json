{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brent Champion\\\\Documents\\\\Coding\\\\portfolio\\\\components\\\\data.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* Main Data Component */\nimport { parseISO, format } from 'date-fns';\nimport { List, AnimatedList } from './list';\nexport default function Data(_ref) {\n  var style = _ref.style,\n      type = _ref.type,\n      filters = _ref.filters,\n      data = _ref.data;\n  console.log();\n  var cleanData;\n\n  if (data) {\n    cleanData = data.filter(function (project) {\n      if ('tags' in project) {\n        if (filters.length == 0) {\n          // No filters yet\n          return true;\n        }\n\n        for (var i = 0; i < filters.length; i++) {\n          if (project.tags.includes(filters[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      } else {\n        return true;\n      }\n    });\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 4\n      }\n    }, type == 'posts' || type == 'tags' ? // <List data={cleanData} filters={filters} type={type}/>a\n    __jsx(List, {\n      type: type,\n      filters: filters,\n      data: cleanData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 6\n      }\n    }) : __jsx(AnimatedList, {\n      data: cleanData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 6\n      }\n    }));\n  } else {\n    cleanData = [];\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }\n    });\n  }\n} // Utility for displaying date\n\n_c = Data;\nexport function Date(_ref2) {\n  var startDate = _ref2.startDate,\n      endDate = _ref2.endDate;\n  var date = parseISO(startDate);\n\n  if (endDate == 'present') {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 4\n      }\n    }, __jsx(\"time\", {\n      dateTime: startDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }, format(date, 'LLLL d, yyyy')), \" - Present\");\n  } else {\n    var _date = parseISO(endDate);\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 4\n      }\n    }, __jsx(\"time\", {\n      dateTime: startDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }\n    }, format(_date, 'LLLL d, yyyy')), \" -\", ' ', __jsx(\"time\", {\n      dateTime: endDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }, format(_date, 'LLLL d, yyyy')));\n  }\n}\n_c2 = Date;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Data\");\n$RefreshReg$(_c2, \"Date\");","map":{"version":3,"sources":["C:/Users/Brent Champion/Documents/Coding/portfolio/components/data.tsx"],"names":["parseISO","format","List","AnimatedList","Data","style","type","filters","data","console","log","cleanData","filter","project","length","i","tags","includes","Date","startDate","endDate","date"],"mappings":";;;;AAAA;AAGA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;AAEA,SAASC,IAAT,EAAeC,YAAf,QAAmC,QAAnC;AAEA,eAAe,SAASC,IAAT,OAA8C;AAAA,MAA9BC,KAA8B,QAA9BA,KAA8B;AAAA,MAAvBC,IAAuB,QAAvBA,IAAuB;AAAA,MAAjBC,OAAiB,QAAjBA,OAAiB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAC5DC,EAAAA,OAAO,CAACC,GAAR;AACA,MAAIC,SAAJ;;AAEA,MAAIH,IAAJ,EAAU;AACTG,IAAAA,SAAS,GAAGH,IAAI,CAACI,MAAL,CAAY,UAACC,OAAD,EAAa;AACpC,UAAI,UAAUA,OAAd,EAAuB;AACtB,YAAIN,OAAO,CAACO,MAAR,IAAkB,CAAtB,EAAyB;AACxB;AACA,iBAAO,IAAP;AACA;;AACD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACO,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACxC,cAAIF,OAAO,CAACG,IAAR,CAAaC,QAAb,CAAsBV,OAAO,CAACQ,CAAD,CAA7B,CAAJ,EAAuC;AACtC,mBAAO,IAAP;AACA;AACD;;AACD,eAAO,KAAP;AACA,OAXD,MAWO;AACN,eAAO,IAAP;AACA;AACD,KAfW,CAAZ;AAgBA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACET,IAAI,IAAI,OAAR,IAAmBA,IAAI,IAAI,MAA3B,GACA;AACA,UAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAZ;AAAkB,MAAA,OAAO,EAAEC,OAA3B;AAAoC,MAAA,IAAI,EAAEI,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,GAIA,MAAC,YAAD;AAAc,MAAA,IAAI,EAAEA,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADD;AAUA,GA3BD,MA2BO;AACNA,IAAAA,SAAS,GAAG,EAAZ;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA;AAED,C,CAED;;KAtCwBP,I;AAuCxB,OAAO,SAASc,IAAT,QAAsC;AAAA,MAAtBC,SAAsB,SAAtBA,SAAsB;AAAA,MAAXC,OAAW,SAAXA,OAAW;AAC5C,MAAMC,IAAI,GAAGrB,QAAQ,CAACmB,SAAD,CAArB;;AAEA,MAAIC,OAAO,IAAI,SAAf,EAA0B;AACzB,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAM,MAAA,QAAQ,EAAED,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BlB,MAAM,CAACoB,IAAD,EAAO,cAAP,CAAlC,CADD,eADD;AAKA,GAND,MAMO;AACN,QAAMA,KAAI,GAAGrB,QAAQ,CAACoB,OAAD,CAArB;;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAM,MAAA,QAAQ,EAAED,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BlB,MAAM,CAACoB,KAAD,EAAO,cAAP,CAAlC,CADD,QACoE,GADpE,EAEC;AAAM,MAAA,QAAQ,EAAED,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BnB,MAAM,CAACoB,KAAD,EAAO,cAAP,CAAhC,CAFD,CADD;AAMA;AACD;MAlBeH,I","sourcesContent":["/* Main Data Component */\r\n\r\nimport Link from 'next/link';\r\nimport { parseISO, format } from 'date-fns';\r\nimport utilStyles from '../styles/utils.module.css';\r\nimport { List, AnimatedList } from './list';\r\n\r\nexport default function Data({ style, type, filters, data }) {\r\n\tconsole.log( );\r\n\tlet cleanData: Array<any>;\r\n\r\n\tif (data) {\r\n\t\tcleanData = data.filter((project) => {\r\n\t\t\tif ('tags' in project) {\r\n\t\t\t\tif (filters.length == 0) {\r\n\t\t\t\t\t// No filters yet\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tfor (var i = 0; i < filters.length; i++) {\r\n\t\t\t\t\tif (project.tags.includes(filters[i])) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{type == 'posts' || type == 'tags' ? (\r\n\t\t\t\t\t// <List data={cleanData} filters={filters} type={type}/>a\r\n\t\t\t\t\t<List type={type} filters={filters} data={cleanData} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<AnimatedList data={cleanData} />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\tcleanData = [];\r\n\t\treturn <div></div>\r\n\t}\r\n\r\n}\r\n\r\n// Utility for displaying date\r\nexport function Date({ startDate, endDate }) {\r\n\tconst date = parseISO(startDate);\r\n\r\n\tif (endDate == 'present') {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<time dateTime={startDate}>{format(date, 'LLLL d, yyyy')}</time> - Present\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\tconst date = parseISO(endDate);\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<time dateTime={startDate}>{format(date, 'LLLL d, yyyy')}</time> -{' '}\r\n\t\t\t\t<time dateTime={endDate}>{format(date, 'LLLL d, yyyy')}</time>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}